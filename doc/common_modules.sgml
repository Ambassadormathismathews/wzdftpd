<chapter>
<title>Common modules</title>

<sect1>
<title>SFV module</title>

<simplesect>
<title>Description</title>
<para>
This module comes with some utilities functions to handle sfv files, and associated files (diz,
zip, etc).
</para>
<para>
When a SFV file is uploaded, server will create <computeroutput>.missing</computeroutput> files.
</para>
<para>
If the file is corrupted, a <computeroutput>.bad</computeroutput> file will be
created.</para>
<para>
HINT: when uploading dirs, be sure to upload SFV file first. The server will
automatically check files as they are uploaded, and update a progress bar
to quickly see how many percent are done.</para>
<para>
NOTE to w_nd0ws users: although a (stupid) os can give you bad habits,
files <emphasis>ARE CASE SENSITIVE !</emphasis></para>
</simplesect>

<simplesect>
<title>What is a SFV file ?</title>
<para>
A SFV file is a small verification file added to dirs, that stores records
about a file or group of files integrity. When you compare a SFV file against
a group of rar files it will check those rar files and tell you if they are
complete or if they are "broken".</para>
<para>
This is done by calculating a 32-bits checksum (*nix users already know
md5 sums, this is similar - with a different algorithm).
</para>
</simplesect>

<simplesect>
<title>Installation</title>
<para>
Just add the line
<screen>module = /path/to/libwzd_sfv.so</screen>
in your config file.
</para>
</simplesect>

<simplesect>
<title>Parameters</title>
<para>
The following parameters are available, you can set them in the config file (don't forget the prefix
<emphasis>param_</emphasis>).</para>
<itemizedlist>
<listitem><screen>sfv_progressmeter</screen>
<para>This dir is created during the upload, when the release isn't complete, to indicate the
progression.</para></listitem>
<listitem><screen>sfv_del_progressmeter</screen>
<para>This regex must match the progressmeter, and is used to find and delete it when the number of
files has changed.
</para></listitem>
<listitem><screen>sfv_incomplete_indicator</screen>
<para>This will be a simlink created to indicate that the release isn't complete.
</para></listitem>
<listitem><screen>sfv_other_completebar</screen>
<para>This dir will be created when release is complete.
</para></listitem>
</itemizedlist>
<para>e.g: <screen>param_sfv_progressmeter = [WzD] - %3d%% Complete - [WzD]</screen>
</para>
</simplesect>

<simplesect>
<title>Features</title>
<itemizedlist>
<listitem><para>
When a SFV file is uploaded, an empty file is created for each name present in
the SFV file, with '.missing' appended.
</para></listitem>
<listitem><para>
If a SFV file is present, each file uploaded (and present in sfv) is checked,
and marqued as bad if checksums doesn't match (.missing are removed).
</para></listitem>
<listitem><para>
A "progress bar" is maintained after each upload, to inform on the progression
of the upload. It uses the <emphasis>number of files</emphasis> to calculate
percent.
</para></listitem>
<listitem><para>
A symbolic link is created to mark the upload as incomplete (and will be
removed when complete).
</para></listitem>
<listitem><para>
When a zip file is uploaded, it is checked, and marqued as bad if corrupted.
</para></listitem>
<listitem><para>
When a diz file is uploaded, it is parsed, and the module tries to guess to number of files to be
uploaded.
</para></listitem>
</itemizedlist>
</simplesect>

<simplesect>
<title>Available commands</title>
<itemizedlist>
<listitem><screen>site sfv check sfv_name</screen>
<para>Checks the specified sfv file. All missing or bad files will be marked
as usual.</para></listitem>
<listitem><screen>site sfv create sfv_name</screen>
<para>Creates a SFV file in current dir.
</para></listitem>
</itemizedlist>
</simplesect>

</sect1>




<sect1>
<title>TCL module</title>

<simplesect>
<title>Description</title>
<para>
This module has an embedded TCL interpreter, and offers several
facilities based on TCL language.
</para>
<para>
The main feature is to add a <link linkend='gloss_proto'>protocol</link>
for hooks, it means that
instead of giving the path to an executable (or script) in a
<link linkend="cfg_cscript">csript directive</link> or in a
<link linkend="cfg_site_cmd">custom site command</link>, you can
use a TCL script with direct access to server internals
</para>
<para>
TCL is provided as a module, keeping main server from adding
many useless dependancies.
</para>
</simplesect>

<simplesect>
<title>Installation</title>
<para>
Just add the line
<screen>module = /path/to/libwzd_tcl.so</screen>
in your config file.
</para>
<para>
You must ensure that the tcl shared library (for ex
libtcl8.4.so, or tcl8.4.dll) is accessible (in the PATH
or in the same directory), or module loading will fail.
</para>
</simplesect>

<simplesect>
<title>Available TCL commands and variables</title>
<itemizedlist>
<listitem><screen>putlog level "message"</screen>
<para>Put the message in log file, only if level is greater or equal to
the current loglevel. level is an integer in range 0 to 10, 0 is the
lowest level (reserved to debug) and 10 is reserved to critical error
messages. default level is 5
<screen>putlog 5 "zipscript: file is corrupted"</screen>
</para></listitem>
<listitem><screen>send_message</screen>
<para>Use the string given in argument to send reply to client.
</para><para>You should send one line at a time.
</para></listitem>
<listitem><screen>send_message_raw</screen>
<para>Sends the string given in argument to client, without
any processing. It must be a valid FTP reply.
</para><para>This function must be use with care.
</para><para>Example:
<screen>send_message_raw "200-test line\r\n"</screen>
</para><para>If reply is complete, script must set variable
wzd_reply to "1" to indicate that reply has been completed.
</para></listitem>
<listitem><screen>vars get/set variable_name [value]</screen>
<para>This function gives access to server internal variables.
Use the 'get' method to read variables, the 'set' method to
change variables (you need to provide a new value).
</para></listitem>
<listitem><screen>vars_user get/set username variable_name [value]</screen>
<para>This function gives access to user variables.
Use the 'get' method to read variables, the 'set' method to
change variables (you need to provide a new value).</para>
<para>Note that this concern variables for user definition, and not
for connected users: for example, you can't get the current ip (this
has a sense only for connected users).
</para></listitem>
<listitem><screen>vfs mkdir/rmdir dirname</screen>
<para>Create or remove a directory.
Directory name <emphasis>must</emphasis> be an absolute path !.
</para></listitem>
<listitem><screen>vfs symlink create/remove [dirname] linkname</screen>
<para>Create or remove a symbolink link.
Directory name <emphasis>must</emphasis> be an absolute path !.
</para></listitem>
<listitem><screen>wzd_reply_code</screen>
<para>Use this variable contains the current reply code used
by server. This is used for custom replies (see send_message_raw).
This must be used with caution.
</para></listitem>
</itemizedlist>
</simplesect>

</sect1>

</chapter>
