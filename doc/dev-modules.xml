<chapter id='modules'><title>Modules</title>

<section><title>Description</title>
<para>To be done</para>
</section>


<section><title>Creating a module</title>

<para>Here is a short tutorial on the creation of a module, using
<command>autoconf</command> and <command>automake</command>.</para>

<para>Server modules are directly linked to the server core, are very fast
(since no abstraction layer is used), and have a complete access to the server
internals. However, you must take care of some important points:
<itemizedlist mark='opencircle'>
 <listitem><para>any error (like a segmentation fault) in the module will
probably cause the server to crash, since the module and the server are running
in the same process memory space</para></listitem>
 <listitem><para>the module must be thread-safe, since the server is
multi-threaded. This is <emphasis>very</emphasis> important, and has many
consequences on the source code: avoid some functions (gethostbyname, strtok),
no global variables, etc.</para></listitem>
 <listitem><para>the module must not block the server (waiting for input, or
locked in a mutex) or it will lock the whole server</para></listitem>
</itemizedlist>
</para>

<para>If your module does not really need to access the server internals, you
should consider writing it in a scripting language (like Perl or TCL), or using
external modules, which are implemented using separate processes and thus are
safer.</para>

<section><title>Autoconf: <filename>configure.ac</filename></title>
<para>Our module will be named <literal>foo</literal>, and will use one source
file named <filename class="headerfile">foo_main.c</filename>. Create a file
<filename class="headerfile">configure.ac</filename> with the following:
</para>
<programlisting>AC_INIT(foo_main.c)
AM_INIT_AUTOMAKE(libwzd_foo,0.1)

AC_PROG_CC
AC_PROG_INSTALL

AM_PROG_LIBTOOL

AM_PATH_WZD(0.6.0, , AC_MSG_ERROR([*** wzdftpd >= 0.6.0 not found ***]))

AC_OUTPUT(Makefile)
</programlisting>

<para>If your module has additional dependencies (for ex. you need the
development files for <application>OpenLDAP</application>, you should check if
the library is installed at this point.</para>
</section>

<section><title>Autoconf: <filename>Makefile.am</filename></title>
<para>The file <filename class="headerfile">Makefile.am</filename> describes the
source files and the method used to compile our module.</para>
<programlisting>lib_LTLIBRARIES = libwzd_foo.la

AM_CFLAGS = $(WZD_CFLAGS)

libwzd_foo_la_LDFLAGS = $(WZD_LIBS)
libwzd_foo_la_SOURCES = foo_main.c
</programlisting>

<para>If you have several source and header files, add them on this line.</para>
</section>

<section><title>Source code: <filename>foo_main.c</filename></title>
<para>Here is the minimal implementation of a module :</para>
<programlisting>#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;

#include &lt;libwzd-core/wzd_structs.h&gt;
#include &lt;libwzd-core/wzd_log.h&gt;

#include &lt;libwzd-core/wzd_mod.h&gt;

int WZD_MODULE_INIT(void)
{
  out_log(LEVEL_INFO,"Module foo loaded\n");

  return 0;
}

void WZD_MODULE_CLOSE(void)
{
}
</programlisting>

<para>The function <function>WZD_MODULE_INIT</function> is used to register your
module to the server: add new commands, add event hooks, etc. (using the
provided API, look in the developer's reference for details) and initialize your
own module.</para>
</section>

<section><title>Building the module</title>
<para>First, we need to create the <command>configure</command> script :</para>
<screen>% aclocal -I ~/DEL/share/aclocal
% libtoolize
% autoconf
</screen>
<para>Run <command>automake</command> to create several files :</para>
<screen>automake -a
</screen>
<para>It will complain that some files are missing. Create them and re-run
<command>automake</command> :</para>
<screen>% touch NEWS README AUTHORS ChangeLog
% automake -a
</screen>

<para>Now, we can build the module. We need to ensure that the command
<command>wzd-config</command> is in the path :</para>
<screen>$ export PATH=$PATH:/opt/wzdftpd/bin
</screen>
<para>and we can build the module with the usual commands :</para>
<screen>$ ./configure
$ make</screen>
</section>

<section><title>Installing the module</title>
<para>Run the following command as a privileges user :</para>
<screen># make install</screen>
<para>or copy the file <filename>libwzd_foo.so</filename> in the modules
directory.</para>

<para>You must allow the module in the server configuration :</para>
<screen>[modules]
/opt/wzdftpd/lib/modules/libwzd_foo.so = allow
</screen>

<para>And then restart the server</para>
<screen>/opt/wzdftpd/etc/init.d/wzdftpd restart</screen>
</section>

<section><title>Distributing the module</title>
<para>You are now ready to distribute your module to the world, and become
famous, get paid etc. But before that, you have a few last steps :</para>

<para>You <emphasis>MUST</emphasis> choose a license for your module. Since
wzdftpd is GPL, the choice will be easy: you must distribute your module under
the GPL as well (make sure you have understood the consequences !). Add the
license file to your project (it can be found in <filename
class="directory">/usr/share/common-licenses/</filename> for most linux
distributions) :</para>
<screen>$ rm COPYING
$ cp /usr/share/common-licenses/GPL COPYING</screen>

<para>You can now create an archive and distribute it. The following command
will create a tarball (compressed archive containing the source code) named
<filename>libwzd_foo-0.1.tar.gz</filename>, and run basic checks on this tarball
to verify that you can really compile the module from it :</para>
<screen>$ make distcheck</screen>

<para>For more details, consult the automake and autoconf documentations.</para>
</section>

</section>

</chapter>

