<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "docbook/dtd/4.2/docbookx.dtd" [
<!ENTITY introduction SYSTEM "introduction.sgml">
<!ENTITY config SYSTEM "config.sgml">
<!ENTITY commands_reference SYSTEM "commands_reference.sgml">
<!ENTITY cookies_reference SYSTEM "cookies_reference.sgml">
<!ENTITY common_modules SYSTEM "common_modules.sgml">
<!ENTITY common_backends SYSTEM "common_backends.sgml">
<!ENTITY custom-commands SYSTEM "custom_commands.sgml">
<!ENTITY sitebot SYSTEM "sitebot.sgml">
<!ENTITY programming_modules SYSTEM "programming_modules.sgml">
<!ENTITY freebsd_notes SYSTEM "freebsd_notes.sgml">
<!ENTITY license SYSTEM "license.sgml">
<!ENTITY faq SYSTEM "faq.sgml">
<!ENTITY a_bugs SYSTEM "appendix_bugs.sgml">
<!ENTITY a_ref SYSTEM "appendix_ref.sgml">
<!ENTITY zip_simple_tcl SYSTEM "zip_simple.tcl">
<!ENTITY zip_simple_perl SYSTEM "zip_simple.pl">
]>
<book>
  <title>wzdftpd Documentation</title>

&introduction;
&config;
&commands_reference;
&cookies_reference;
&common_modules;
&common_backends;
&custom-commands;
&sitebot;
&programming_modules;
&freebsd_notes;
&faq;
&a_bugs;
&a_ref;
&license;

<glossary id='glossary'>
<glossentry id='gloss_backend'><glossterm>backend</glossterm>
<indexterm><primary>backend</primary></indexterm>
<glossdef>
<para>
A backend is a module which provides a layer between the server and the
application that will store users and groups. It allows to use plain
text files, directories(LDAP) or databases in the same convenient way.
</para>
</glossdef>
</glossentry>

<glossentry id='gloss_hook'><glossterm>hook</glossterm>
<indexterm><primary>hook</primary></indexterm>
<glossdef>
<para>
A hook is a function or a program, which is called when an associated
event happends.
</para>
</glossdef>
</glossentry>

<glossentry id='gloss_proto'><glossterm>protocol</glossterm>
<indexterm><primary>protocol</primary></indexterm>
<glossdef>
<para>
A protocol is used at every point where you can use a function or the name of
a program (exemple: on events). A protocol is a specific way of running the command,
and are often managed by plugins.
</para>
<para>
Exemple:
<programlisting>
tcl:/path/to/script.tcl
</programlisting>
is the line corresponding to a file name, to be executed with the 'tcl' protocol.
In this cas, it means the internal TCL interpreter will handle execution.
</para>
</glossdef>
</glossentry>

<glossentry id='gloss_tls_mode'><glossterm>tls modes</glossterm>
<indexterm><primary>tls_mode</primary></indexterm>
<glossdef>
<para>
Three modes are available for TLS: implicit, explicit and explicit_strict.
In explicit mode, server will start in clear mode (as usual), and if the client
issues a "AUTH TLS" command, then it switches to ssl (put normal connections
are still allowed).</para>
<para>
In explicit_strict mode, clients are forced to use "AUTH TLS" or will be
rejected.</para>
<para>
In implicit mode, connection is switched to SSL <emphasis>before</emphasis> any
data are exchanged. Thus there is no need to issue "AUTH" commands, though not
all clients support this mode.</para>
</glossdef>
</glossentry>

</glossary>

</book>
