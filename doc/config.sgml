<!-- vi:tw=80
  -->
<chapter id='config_file'>
<title>Config file directives</title>

<sect1 id='conf'>
<title>General configuration</title>

<para><emphasis>IMPORTANT: starting from 0.6.0, the config file format has
changed.</emphasis> wzdftpd now uses a .ini like config:
</para>
<itemizedlist mark='opencircle'>
<listitem><para>Lines beginning with a # are considered as
comments</para></listitem>
<listitem><para>Variables are organized in sections. The most important one is
"GLOBAL", where all server parameters are stored. The name of the variable is
also called a <emphasis>key</emphasis>, and the section a
<emphasis>group</emphasis>.
</para></listitem>
<listitem><para>Section names are written with the name enclosed in brackets,
for ex "[GLOBAL]"
</para></listitem>
<listitem><para>All variables are written using the standard form "key = value".
Values can't be written on several lines. Multiples values must be separated by
commas, for ex <programlisting>key = value1,value2</programlisting>
</para></listitem>
<listitem><para>The main groups are "GLOBAL" (the server config), "perms",
"modules", "cron", "sections", "events", "vfs" and "messages".
</para></listitem>
</itemizedlist>

<simplesect id='ip_and_ident'>
<title>IPs and ident</title>

<para>wzdftpd gives the possibility to check user identity on connection.</para>
<para>To permanently disable ident lookups for all users, set the <link
linkend='cfg_disable_ident'>disable_ident</link> variable to 1 or 'yes'</para>

<para>Wildcards are accepted</para>

<para>You can use dynamic ip (e.g xxx.no-ip.com), server will resolve it at
runtime.
</para>

<para>When you specify an ip, it means all ident from this ip address are allowed.
If you want to restrict connection for a specific ident: just add 'ident@' in front
of the ip.
</para>
<screen>ip = ident@host.domain.com</screen>
<para><emphasis>IMPORTANT: This option is DIFFERENT from other ftpd's</emphasis>
. Instead of specifying '*@ip', just write the ip (wzdftpd understands the fact you
don't give any ident as an implicit authorization for all idents).
</para>

<para>
 <emphasis>NOTE for 0.3 users: signs in front of ip have disappeared and are
 no more needed (+ and -). Just remove them.
 </emphasis>
</para>

</simplesect>

<simplesect id='symlinks'>
<title>Symbolic links (symlinks)</title>

<para>Symbolic links are often used on linux and unix systems, so users of these
systems should have no difficulty to use this.
A symbolic link (symlink, in short) is a link between a non-existent directory (so-called
<emphasis>virtual</emphasis> directory) and an existing directory (so-called
<emphasis>physical</emphasis> directory). This allows, for example, to create a directory
whose contents are on another physical drive. This is similar to windows shortcuts.
</para>
<para>Symlinks are created online, using the <link linkend='site_link'>site
link</link> commands.
</para>
<screen>site link create /music link</screen>
<para>This will create a symbolic link 'link' in the current directory, which
points to '/music' (at the homedir of the user).</para>

<para>On windows, symlinks can't be seen on the filesystem (so do
not search directories in explorer), they are fully handled by server.
</para>
<para>You can set permissions on links just as for any other directory, with the
same commands (chmod, etc).</para>

<para><emphasis>Note on performance (windows only):</emphasis> please note that
symlinks are emulated, and you will therefore suffer a small penalty on speed, compared
to real directories.  However, this generally does not slow down the server
enough to be be important, and symlinks are lighter than VFS.</para>

</simplesect>

<simplesect id='vfs'>
<title>Virtual File system (VFS)</title>

<para>wzdftpd offers the possibility to use virtual directories, also known as VFS.
A VFS is a kind of link between a non-existent directory (so-called
<emphasis>virtual</emphasis> directory) and an existing directory (so-called
<emphasis>physical</emphasis> directory). This allows, for example, to create a directory
whose contents are on another physical drive.
</para>
<para>Unlike symlinks (which are create online), VFS are stored in the config
file.
</para>
<screen>vfs = |/home/pollux/vfs|/etc|</screen>
<para>This will create a virtual directory 'vfs' in '/home/pollux', which will be
absolutely equivalent to '/etc'.</para>

<note><title>Change in 0.6.0</title>
<para>vfs are defined in the "vfs" section, so the syntax is slightly changed:
<programlisting>customname = |vfspath|realpath|
customname = |vfspath|realpath| permissions</programlisting>
For ex:
</para>
<screen>
[vfs]
vfs1 = |/home/pollux/vfs|/etc|
</screen>
</note>

<para>You can use restrictions on VFS, to allow only specified users to see and use them.
Note this is only the ability to see and use VFS, and does not affect permissions on
directories or files contained in VFS.</para>
<screen>vfs = |/home/pollux/vfs|/etc| +O =admin</screen>
<para>This will define the same VFS as previously, restricted only to siteops (+O flag)
and members of the group 'admin' (=admin).</para>

<para>It would be fastidious to define VFS for all users and groups, for example.
To help you in this task, wzdftpd allows you to use a small subset of cookies, to have
a set of wildcards for users, groups, etc.</para>
<screen>vfs = |%userhome/etc|/etc| +O =admin</screen>
<para>This will create a virtual dir called 'etc' in the homedir of every siteop and
member of admin group, equivalent to /etc.</para>
<para>For the moment, supported cookies are <emphasis>username</emphasis>,
<emphasis>usergroup</emphasis>, and <emphasis>userhome</emphasis>.</para>

<para><emphasis>Note on performance:</emphasis> please note that VFS are
emulated, and you will therefore suffer a small penalty on speed, compared to
real directories.  This penalty will be increased if you use cookies.</para>

<para>If you don't know what to choose between symlinks and VFS, read this
<link linkend='faq_links_vfs'>FAQ entry</link>.
</para>

</simplesect>

<simplesect id='ex_add_user'>
<title>Users and Groups</title>

<para>wzdftpd, unlike many other ftpd daemons, is very oriented on groups. The idea
is to create groups with specific properties, and make users belong
to several groups. It simplifies configuration, because instead of configuring
each user, you just have to configure groups. However, please remember that the first
group of a user is special (it is his main group).
</para>
<para>For example, setting the defaultpath in a group is specially important, because
it will be used as a default value each time you create a user. The default ratio
will also be taken from the group's ratio.</para>
<para>Also, do not forget that when a user is created, it has no default ip allowed.
If you authorize an ip for the group, it will be allowed for all users.</para>
<para>For users without specific idle time limit, the value of the group will be
checked. So, user value is needed only if different from group.</para>

<para>Here is the standard procedure to add a user:
Use <programlisting>site adduser foo pass users</programlisting>
to create user 'foo' with password 'pass', and belonging to the main group 'users'. Note that at
this point, foo will not be able to log in, mainly because it has no allowed ip
(except under some conditions that we'll see later).</para>
<para>Now add an authorized ip with
<programlisting>site addip foo *</programlisting> or
<programlisting>site addip foo foobar@127.0.0.1</programlisting>
if you want an ident check.</para>
<para>The default ratio of foo is inherited from the group 'users', in this case
we will suppose 1:3. If you want to change it you can use for example
<programlisting>site change foo ratio 0</programlisting></para>
<para>The default homedir for foo is also inherited from group 'users', you can
change it with for example:
<programlisting>site change foo homedir /home/ftp</programlisting></para>
<para>Please note that adding an authorized ip is also optional, as every ip
authorized for the group is authorized for each group member.</para>

<para>This short example should demonstrate how setting group values is important,
as you can use group values when you create users.</para>

</simplesect>

<simplesect id='passwords'>
<title>Passwords</title>

<para>Since version 0.6.0, authentication is managed by a dedicated component,
which supports several authentication methods, including: passwords,
certificates, and third-party modules (like PAM).
</para>

<para>Each method is associated to a prefix, fox example: {SHA} for SHA-1
encryption, {cert} for certificates, etc. The method is specified when changing
a password by writing it just before the password. For example,
<programlisting>site chpass username {SHA}newpass
</programlisting>
will change password for user <emphasis>username</emphasis>, set it to
<emphasis>newpass</emphasis>, and store it encrypted in SHA-1 format.
</para>

<para>If the selected method does not use passwords (like certificates), just
specify the prefix:
<programlisting>site chpass username {cert}</programlisting>
</para>

<para>If no authentication method is specified, then the default is to store the
password encrypted in <emphasis>crypt</emphasis> format.
</para>

<para>See <link linkend='authentication'>authentication chapter</link> for
details on available methods and implementation.
</para>

</simplesect>

<simplesect id='files_messages'>
<title>Files and messages</title>

<para>You can customize server replies (under certain conditions,
you must always be RFC-compliant if you want your server to work).
This requires some little knowledge of FTP, but there are some
well-known messages you can easily modify:</para>
<para>Message 220 is known as 'FTP Banner', it is what the client
sees when he connects. The default is:
<programlisting>220 = wzd server ready.</programlisting></para>
<para>Message 230 is known as 'Welcome Message', it is what the
server sends to the client when the connection request has been accepted, and
the login/password validated. It is generally used to show statistics about
server, etc. The default message is:
<programlisting>230 = User logged in, proceed.</programlisting>
</para>
<para>Message 221 is sent when client disconnects. The default
message is
<programlisting>221 = Cya !</programlisting>
</para>

<para>Of course, using this would limit messages to only one
line per message .. so you can put a message in a file and use the
file name as argument for the precedent commands, just prefix the
file name with a + (the server will not guess this is a filename
otherwise):
<programlisting>230 = +/path/to/my/welcome.msg</programlisting>
</para>

<para>Remember you can use cookies in your messages, but keep in mind
that cookies are NOT always available (sometimes it just doesn't make
sense). For example:
<programlisting>230 = hello, %username.</programlisting>
will actually work, whereas
<programlisting>220 = wzd server for %username</programlisting>
will NOT, because at the moment the message 220 is sent the server
does not know the user name (he isn't authenticated yet).</para>
<para>If the server can't translate a cookie into its value, the
cookie name will be written as is: '%username' will return 'username'
</para>

<para><emphasis>NOTE:</emphasis> messages are defined in the "messages" section
of the config</para>

</simplesect>

<simplesect id='log_channels'>
<title>Logging Channels</title>

<para>Since version 0.5.4, wzdftpd uses the idea of
<emphasis>channels</emphasis> to redirect logs. Each line logged is associated
with a unique number (the channel), and each channel is associated to a
configuration: do not log, log to a file and/or to syslog.
</para>
<para>
There are 10 predefined channels, reserved for standard server logs. They are
organized in order of importance: the lowest number corresponds to debug, the
highest to critical error messages. The <link
linkend='cfg_loglevel'>loglevel</link> config directive is used to select only
interesting levels: if <emphasis>loglevel</emphasis> is set to
<emphasis>normal</emphasis>, only messages with at least this level will be
logged.
</para>

<para>
Other log channels are used differently: their value is not used to control
verbosity, but only as a selector: you can choose to redirect messages to the
standard log, or to redirect messages concerning a specific level to a different
log file, etc. (this can also be done for standard channels). The <link
linkend='cfg_log_channel'>log_channel</link>config directive is used to change
destination of channels.
</para>

</simplesect>

</sect1>

<sect1 id='directives_ref'>
<title>Directives reference</title>
<variablelist>

<varlistentry id='cfg_backend'><term>backend (default: plaintext)</term>
<listitem>
<para>The backend to use for authentication and user/group management.
You can specify a test on the backend version if needed. See
<link linkend='gloss_backend'>the glossary</link> for explanation on what a
backend is.
<screen>backend = /path/to/libwzdplaintext.so</screen>
<screen>backend = /path/to/libwzdplaintext.so > 122</screen>
</para>
<para>In these two examples, backend will be called 'plaintext'</para>
<para>
You need <emphasis>at least</emphasis> one backend.
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_backend_param'><term>backend_param_...
<emphasis>Deprecated since 0.6.0 !</emphasis></term>
<listitem>
<para>If backend needs an argument, specify it here. The argument depend on
the backend used, see backend definition for details.
<screen>backend_param_plaintext = /path/to/users</screen>
</para>
<para>
This line must come <emphasis>after</emphasis> the definition of the backend.
</para>
<para>Since 0.6.0, parameters are defined in sections with the same name as the
backend. For ex, if you use the "plaintext" backend:</para>
<screen>[plaintext]
param = /path/to/users
</screen>
</listitem>
</varlistentry>

<varlistentry id='cfg_check_ip_before_login'><term>check_ip_before_login (default:
0)</term>
<listitem>
<para>Specify 1 here to check the ip address of a client at the connection
level, before any message is sent. The address is searched in all groups and
clients, and if not found, the connection is closed without any reply (the
banner <programlisting>220 wzdftpd server ready.</programlisting> is not sent,
for example).
<screen>check_ip_before_login = 1</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_cscript'><term>cscript <emphasis>Deprecated since 0.6.0
!</emphasis></term>
<listitem>
<para>Custom scripts (or binaries) to be executed before/after
certain commands.
<screen>cscript = /path/to/exe</screen>
<screen>cscript = tcl:/path/to/script</screen>
</para>
<para>Since 0.6.0, events are defined in the "events" section.
Syntax is customname = EVENT action arguments</para>
<screen>[events]
event1 = LOGIN /bin/echo hello %usertag
event2 = SITE /path/to/event_site.sh
</screen>
</listitem>
</varlistentry>

<varlistentry id='cfg_data_buffer_length'><term>data_buffer_length (default: 16384)
   <emphasis>(ADVANCED, > 0.3.3)</emphasis></term>
 <listitem>
  <para>Change the size of the internal buffer used for data transfers.
  <screen>data_buffer_length = 65536</screen>
  </para>
  <para><emphasis>Use this option carefully !</emphasis> This can have a big impact
  on transfer rates.
  </para>
 </listitem>
</varlistentry>

<varlistentry id='cfg_deny_files_uploaded'><term>deny_files_uploaded (default:
0)</term>
<listitem>
<para>Specify 1 here to deny access to files during their upload.
<screen>deny_access_files_uploaded = 1</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_dir_message'><term>dir_message</term>
<listitem>
<para>When changing current directory, the server will look for this file, and
if present will append it to the end of the ftp reply.
<screen>dir_message = .message</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_disable_ident'><term>disable_ident (default: no)</term>
<listitem>
<para>Completely disable all ident lookups when a client connects.
<screen>disable_ident = yes</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_disable_tls'><term>disable_tls (default: no)</term>
<listitem>
<para>Completely disable TLS/SSL support (even if compiled in).
<screen>disable_tls = yes</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_dynamicip'><term>dynamic_ip (default: 0)</term>
 <listitem>
 <para>If you specify 1 or an ip, the server will try to detect ip changes (e.g
 DSL disconnections).
 <screen>dynamic_ip = 1</screen>
 <screen>dynamic_ip = xxx.myftp.org</screen>
 </para>
 <para>0 means the option is deactivated, 1 the server will ask the system to
 find its ip, otherwise the server will perform DNS lookups</para>
 </listitem>
</varlistentry>

<varlistentry id='cfg_hide_dotted_files'><term>hide_dotted_files (default:
0)</term>
<listitem>
<para>Specify 1 here to hide files beginning with a dot ('.')
<screen>hide_dotted_files = 1</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_ip'><term>ip (default: *) <emphasis>Deprecated since 0.6.0
!</emphasis></term>
<listitem>
<para>Specify server ip, to restrict server to a specific interface (useful
mainly for server with multiples interfaces).
<screen>ip = *</screen>
<screen>ip = 127.0.0.1</screen>
</para>
<para>Since 0.6.0, this command is superseeded by the <link
linkend="cfg_port">port</link> directive.
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_log_channel'><term>log_channel_... (default: use logfile or syslog)</term>
<listitem>
<para>Change log file associated to a specific channel. The first 10 channels are reserved
for standard log levels (from debug messages to critical errors), others can be used
by backends or modules. To know the level associated to a module please consult the
corresponding docs.
<screen>log_channel_21 = /var/log/wzdftpd/plaintext.log</screen>
</para>
<para>
To disable a channel, just leave empty the file name field:
<programlisting>log_channel_21 =</programlisting>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_logdir'><term>logdir (default: do not use log directory)</term>
<listitem>
<para>Location of a directory where the server will put various log files.
<screen>logdir = /var/log/wzdftpd</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_logfile'><term>logfile (default: do not use log file)</term>
<listitem>
<para>Log file for server activity (see <link linkend='cfg_use_syslog'>
use_syslog</link>)
<screen>logfile = /path/to/wzd.log</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_loglevel'><term>loglevel (default: normal)</term>
<listitem>
<para>Controls the verbosity of the server in the log file.
<screen>loglevel = high</screen>
</para>
<para>This means only messages important or critical error messages will be
logged (and as this is higher than 'normal', many normal messages will be
ignored). To the contrary, if you set loglevel to 'lowest', you will get ALL
messages (even debug).
</para>
<para>level can be one of (in order): lowest, flood, info, normal, high,
critical</para>
<para>See also: <link linkend='log_channels'>Log Channels</link> for more
details.</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_max_dl_speed'><term>max_dl_speed (default: 0)</term>
<listitem>
<para>Maximum cumulated (for all users connected) download speed in bytes/sec.
<screen>max_dl_speed = 300000</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_max_threads'><term>max_threads (default: 32)</term>
<listitem>
<para>The hard limit for child threads (clients connected simultaneously).
<screen>max_threads = 50</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_max_ul_speed'><term>max_ul_speed (default: 0)</term>
<listitem>
<para>Maximum cumulated (for all users connected) upload speed in bytes/sec.
<screen>max_ul_speed = 300000</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_pasv_high_range'><term>pasv_high_range (default: 65536)</term>
<listitem>
<para>The higher bound of ip range the server can take.
<screen>pasv_high_range = 3000</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_pasv_ip'><term>pasv_ip (default: *)</term>
<listitem>
<para>Specify passive ip.
<screen>pasv_ip = 64.xxx.xxx.xxx</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_pasv_low_range'><term>pasv_low_range (default: 1025)</term>
<listitem>
<para>The lower bound of ip range the server can take.
<screen>pasv_low_range = 2500</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_pid_file'><term>pid_file (default: /var/run/wzdftpd.pid)</term>
<listitem>
<para>File where pid of server will be stored. This is used by init.d scripts
to send signals to server.
<screen>pid_file = /path/to/wzdftpd.pid</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_port'><term>port (default: 21) <emphasis>Changed in 0.6.0
!</emphasis></term>
<listitem>
<para>The port to listen.
<screen>port = 1321</screen>
</para>
<para><emphasis>IMPORTANT: under linux, you need privileges to bind to a system
port ( &lt; 1024 )</emphasis></para>
<para>Since 0.6.0, this option controls the port AND the ip to bind to. If you
specify <programlisting>port = 1321</programlisting>, the server will bind to
all interfaces on port 1321, and in IPv6 if available</para>
<para>To bind to a specific ip address, just use the ip:port syntax:
<programlisting>ip = 127.0.0.1:1321</programlisting>
The server will understand IPv6 addresses:
<programlisting>ip = ::1:1321</programlisting>
</para>
<para>This option is multi-valued, so if you want to bind to several ip/ports,
just use commas to separate the values:
<programlisting>ip = 1321, 192.168.0.100:1234</programlisting>
The server will listen on all specified addresses and ports.
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_reject_unknown_users'><term>reject_unknown_users (default: 1)</term>
<listitem>
<para>This options defines the behavior of the server if the user is not accepted.
The default (1) will immediately reject user and close connection, while setting 0 will
cause the server to continue the login process (sending a password request) and reject
user after.
<screen>reject_unknown_users = 0</screen>
</para>
<para>This option can be used for more security, to prevent a client from detecting
user names.
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_server_gid'><term>server_gid (default: none)</term>
<listitem>
<para>Change the group ID of the server after binding port.
This is useful only if server is running as root
<screen>server_gid = users</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_server_uid'><term>server_uid (default: none)</term>
<listitem>
<para>[Linux] Server will drop privileges and change its uid to server_uid
after binding port. This is useful only if server is runned by root
<screen>server_uid = toto</screen>
</para>
<para><emphasis>IMPORTANT: under linux, you need privileges to bind to a system
port ( &lt; 1024 )</emphasis></para>
</listitem>
</varlistentry>

<varlistentry id='cfg_site_cmd'><term>site_cmd <emphasis>Deprecated since 0.6.0
!</emphasis></term>
<listitem>
<para>Custom site commands.
<screen>site_cmd = my_free /path/to/free.sh</screen>
<screen>site_cmd = my_tcl tcl:/path/to/script</screen>
</para>
<para>
This will define a new site command, "my_free".
</para>
<para>
You can also print out the content of a file (parsing all cookies inside).
<screen>site_cmd = onel !/path/to/onel.txt</screen>
</para>
<para><emphasis>
The default permission is to allow ALL users to run command.
Do not forget to add a permission line if your command needs to be restricted !
</emphasis></para>
<para>Since 0.6.0, custom scripts are defined in the "custom_commands" section.
(Ultimately, this will allow to define general custom commands, not only site
commands. Syntax is commandname = action</para>
<screen>[custom_commands]
site_myls = /path/to/myls.sh
site_rules = !/path/to/rules.txt
</screen>
<para>If the first character of the command is !, then the command with return
to the client the content of the specified file (replacing cookies).
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_use_syslog'><term>use_syslog (default: 1, except for
cygwin)</term>
<listitem>
<para>Use syslog to log server messages (see <link linkend='cfg_logfile'>
logfile</link>)
<screen>use_syslog = 1</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_tls_certificate'><term>tls_certificate [TLS only]</term>
<listitem>
<para>The name of the TLS certificate to use.
<screen>tls_certificate = /path/to/wzd.pem</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_tls_certificate_key'>
<term>tls_certificate_key [TLS only] <emphasis>( wzdftpd >= 0.5 )</emphasis></term>
<listitem>
<para>The name of the TLS certificate key file to use.
<screen>tls_certificate_key = /path/to/wzd_key.pem</screen>
</para>
<para>If not specified, the server will try to use the certificate for the
key file.</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_tls_cipher_list'><term>tls_cipher_list (default: ALL) [TLS only]</term>
<listitem>
<para>The cipher list server will negotiate during TLS handshake
<screen>tls_cipher_list = ALL</screen>
</para>
<para>You should not use this option, or let "ALL", unless you know
what you are doing. </para>
<para>see openssl ciphers, man openssl(1)</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_tls_mode'><term>tls_mode (default: explicit) [TLS only]</term>
<listitem>
<para>Use implicit, explicit or explicit_strict mode
(see <link linkend='gloss_tls_mode'>tls modes for details</link>)
<screen>tls_mode = explicit</screen>
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_umask'><term>umask (default: 775)</term>
<listitem>
<para>This is the permissions that are set when a new directory is created.
Permissions are written in octal with the default format (permissions for owner,
group, others).
<screen>umask = 755</screen>
</para>
<para>
The default permissions (775) allow every user from the same group to write
files in the directory.
</para>
<para>
Remember that DELETE permission is managed in a different way - unlike unix, 
it's not because you have the write permission that you can delete files in it.
In fact, unless you specify an explicit permission on config file, only the
owner of a file (and siteop) can delete a file.
</para>
</listitem>
</varlistentry>

<varlistentry id='cfg_xferlog'><term>xferlog (default: do not log)</term>
<listitem>
<para>Log transferred files in common xferlog format (suitable for analysis
with classical tools).
<screen>xferlog = /path/to/xferlog</screen>
</para>
</listitem>
</varlistentry>


</variablelist>

</sect1>

</chapter>
