<chapter id='backends'><title>Backends</title>

<section id='backend_definition'>
 <title>Definition</title>

<para>A backend is a module of the server, dedicated to users and groups
management.
</para>

<para>Currently, a backend has the following properties:
<itemizedlist mark='opencircle'>
 <listitem><para>it is loaded dynamically when the server starts (although
 supporting static versions is planned)</para></listitem>
 <listitem><para>it must be unique (multiple backends is possible, but we must
 solve problems like uid and gid unicity, and possibly also for users and groups
 names).</para></listitem>
 <listitem><para>it is independant of the server: the backend must use a fixed
 API for the functions registered on the server, but has no dependency on it
 (the server has also no dependency on backend), allowing the backend to has
 much larger dependencies like databases without adding them to the server
 itself.</para></listitem>
 <listitem><para>it can use the authentication library from the server, in order
 to have a common authentication method (passwords, certificates etc.) for all
 backends.</para></listitem>
 <listitem><para>Users and groups lookups are cached by the server, so the
 backend need not to implement a cache system. However, if a user (group) is
 modified in an external way, the backend must tell the server to invalidate the
 cache entry.</para></listitem>
</itemizedlist>
</para>

</section>

<section>
 <title>Creating and registering a backend</title>

<para>A backend MUST define the following function:
<programlisting>int wzd_backend_init(wzd_backend_t * backend);
</programlisting>
This function takes an allocated structure <literal>wzd_backend_t</literal>
(defined in <filename class="headerfile">libwzd-core/wzd_backend.h</filename>),
and must set up its members to the corresponding functions or datas.

The structure is defined as following:
<programlisting>
struct wzd_backend_t {
  unsigned int struct_version; /* used to know which fields are
                                  present in the struct .. */
  char * name;
  unsigned int version;

  int (*backend_init)(const char * param);

  uid_t (*backend_validate_login)(const char *, wzd_user_t *);
  uid_t (*backend_validate_pass) (const char *, const char *, wzd_user_t *);
  wzd_user_t * (*backend_get_user)(uid_t uid);
  wzd_group_t * (*backend_get_group)(gid_t gid);
  uid_t (*backend_find_user) (const char *, wzd_user_t *);
  gid_t (*backend_find_group) (const char *, wzd_group_t *);
  int (*backend_chpass) (const char *, const char *);
  int (*backend_mod_user) (const char *, wzd_user_t *, unsigned long);
  int (*backend_mod_group) (const char *, wzd_group_t *, unsigned long);
  int (*backend_commit_changes) (void);

  int (*backend_exit)(void);
};
</programlisting>
</para>

<para>To be done</para>
</section>


</chapter>
