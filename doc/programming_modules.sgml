<chapter id='programming_modules'>
<title>Programming modules</title>

<sect1 id='modules_kernel'>
<title>Kernel-level modules</title>

<para>This section describes how to create a new module in C. These modules
have complete access to internals, and can completely modify the
behavior of the server. However, before trying to create such modules,
please ensure you understand the <link linkend="modules_kernel_license">
"License considerations"</link> at the end of this section, and that you agree
with it.
</para>

<simplesect id='modules_kernel_internals'>
<title>Internals</title>

<para>You must add the following headers to your source code:
<programlisting>#include &lt;wzd_structs.h&gt;
#include &lt;wzd_mod.h&gt;</programlisting>
</para>

<para>To easily identify your module, and provide a versioning system, you
should add the following just after the includes (in the global section):
<programlisting>
MODULE_NAME(your_module_name);
MODULE_VERSION(version)
</programlisting>
Please note that the module name is NOT quoted (e.g: my_module), and that
the version is a simple integer (e.g: 103).
</para>

<para>The module must provide a function with the following prototype:
<programlisting>int WZD_MODULE_INIT(void);</programlisting>
This function will be called when module is loaded, so you can initialize
all data needed by module here.
If you want to register <link linkend='gloss_hook'>hooks</link>,
you must do it at this point, using function
<programlisting>hook_add(config, mask, hook)</programlisting>

You can also register a new <link linkend='gloss_proto'>protocol</link> using:
<programlisting>hook_add_protocol("sig:",sig_length,function);</programlisting>

One optional function can be declared to clean up all data used by module, and
will be called when module is unloaded, with the following prototype:
<programlisting>void WZD_MODULE_CLOSE(void)</programlisting>
</para>

<para><emphasis>NOTE: </emphasis>as always as possible, you should declare all
your functions and global variables as 'static', to avoid possible clashes with
names of other modules
</para>

</simplesect>

<simplesect id='modules_kernel_prereq'>
<title>Prerequisites</title>
<para>
You need the following to compile and use new modules for wzdftpd:
</para>
<itemizedlist>
<listitem><para>A working version of wzdftpd compiled from sources
<emphasis>or</emphasis> the wzdftpd-dev package for your distribution.</para></listitem>
</itemizedlist>

</simplesect>

<simplesect id='modules_kernel_compilation'>
<title>Compilation</title>

<para>wzdftpd provides a helper application to retrieve information about
installed libraries</para>
<para>To find the compilation flags, use the following command:
<programlisting>wzd-config --cflags libwzd-core</programlisting>
</para>
<para>To find the link flags, use the following command:
<programlisting>wzd-config --libs libwzd-core</programlisting>
</para>
<para>If you are using auto* tools, you can include the provided file
wzd.m4, which defines the macro
<programlisting>AM_PATH_WZD([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])</programlisting>
This macro defines the variables WZD_CFLAGS, WZD_LIBS and WZD_VERSION.
Just configure and make.</para>

</simplesect>

<simplesect id='modules_kernel_license'>
<title>License considerations</title>

<para>wzdftpd is distributed under <link linkend='license'>GPL</link>.
That <emphasis>clearly</emphasis> means that you <emphasis>MUST</emphasis> distribute
your module under GPL, if you intend to distribute it (license covers distribution, and
it means you must give source to people, or give them access, when you distribute them
your module).</para>
<para>This is an intentional behavior, keep in mind that using wzdftpd you can benefit
from a big amount of functions, and that it has taken much time to do it. The only
contribution that is asked in exchange is to make your work accessible, so others
can benefit it.</para>
<para>If these terms of license are not suitable for you, then you cannot use kernel-level
modules. However, you can use <link linkend='modules_external'>external modules</link>
without any license restriction.</para>

</simplesect>

</sect1>



<sect1 id='modules_external'>
<title>External modules</title>

<para>This sections describes how to develop an external module, which must be an
executable program.</para>

</sect1>




<sect1 id='variables'>
<title>Variables</title>

<para>wzdftpd gives a unified API to access server variables, user variables or
group variables.</para>

<para>The following functions are provided as exported functions in the wzdftpd
shared library, but all important modules (<link linkend="module_tcl">tcl</link>
,<link linkend="module_perl">perl</link>, etc.) will wrap them into the
corresponding languages.
.
</para>

<simplesect id='vars'>
<title>Config variables</title>

<para>These variables are configured in the config file.
The following variable names are available for vars get/set:</para>

<table frame='all' id="table_vars">
<title>Config variables</title>
<tgroup cols="2" align='left' colsep='0' rowsep='0'>
<tbody>
<row><entry>Variable</entry><entry>Description</entry></row>

<row><entry>bw</entry><entry>The current cumulated bandwidth of the server
(downloads + uploads) (read-only)</entry></row>
<row><entry>login_pre_ip_check</entry><entry>1 if server checks ip before login
message, else 0</entry></row>
<row><entry>loglevel</entry><entry>the current log level (as a string)</entry></row>
<row><entry>max_dl</entry><entry>The download limit</entry></row>
<row><entry>max_ul</entry><entry>The upload limit</entry></row>
<row><entry>max_threads</entry><entry>The maximum number of connected clients
</entry></row>
<row><entry>pasv_low</entry><entry>Passive range lower bound</entry></row>
<row><entry>pasv_high</entry><entry>Passive range upper bound</entry></row>
<row><entry>port</entry><entry>The port the server is currently binded to
(read-only)</entry></row>
<row><entry>uptime</entry><entry>time elapsed since server start (read-only)</entry></row>
</tbody>
</tgroup>
</table>

</simplesect>


<simplesect id='vars_user'>
<title>User variables</title>

<para>These variables are configured in the backend.
The following variable names are available for vars_user get/set:</para>

<table frame='all' id="table_vars_user">
 <title>User variables</title>
 <tgroup cols="2" align='left' colsep='0' rowsep='0'>
 <tbody>
 <row><entry>Variable</entry><entry>Description</entry></row>
 
 <row><entry>credits</entry><entry>User credits (0 means unlimited)</entry></row>
 <row><entry>group</entry><entry>The main group of the user</entry></row>
 <row><entry>home</entry><entry>User's home directory</entry></row>
 <row><entry>max_dl</entry><entry>User's download limit</entry></row>
 <row><entry>max_ul</entry><entry>User's upload limit</entry></row>
 <row><entry>name</entry><entry>User's login name</entry></row>
 <row><entry>tag</entry><entry>User's tagline (or description)</entry></row>
 </tbody>
 </tgroup>
</table>

<para><emphasis>addip, delip, flags, leech_slots, max_idle, num_logins, pass,
perms, ratio, user_slots ?</emphasis></para>

</simplesect>


<simplesect id='vars_group'>
<title>Group variables</title>

<para>These variables are configured in the backend.
The following variable names are available for vars_group get/set:</para>

<table frame='all' id="table_vars_group">
<title>Group variables</title>
<tgroup cols="2" align='left' colsep='0' rowsep='0'>
<tbody>
<row><entry>Variable</entry><entry>Description</entry></row>

<row><entry>home</entry><entry>Group's default home directory</entry></row>
<row><entry>max_dl</entry><entry>Group's download limit</entry></row>
<row><entry>max_ul</entry><entry>Group's upload limit</entry></row>
<row><entry>name</entry><entry>Group's login name</entry></row>
<row><entry>tag</entry><entry>Group's tagline (or description)</entry></row>
</tbody>
</tgroup>
</table>

<para><emphasis>addip, delip, max_idle, num_logins, perms, ratio ?</emphasis></para>

</simplesect>


</sect1>


</chapter>
