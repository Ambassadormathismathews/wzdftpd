#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.


AC_PREREQ(2.53)
AC_INIT(wzdftpd, 0.4, pollux@wzdftpd.net)
AM_INIT_AUTOMAKE

#AC_CANONICAL_HOST

# having both commands will give warnings, but is necessary for BSD
AC_CANONICAL_TARGET

# AC_CONFIG_SRCDIR([backends/plaintext/libplaintext_main.c])
AM_CONFIG_HEADER([config.h])

# helper macros
sinclude(ac-helpers/berkeley-db.m4)
sinclude(ac-helpers/mysql.m4)
sinclude(ac-helpers/openssl.m4)
sinclude(ac-helpers/pam.m4)
sinclude(ac-helpers/pgsql.m4)
sinclude(ac-helpers/tcl.m4)
sinclude(ac-helpers/unicode.m4)

AM_MAINTAINER_MODE

# Checks for programs.
CFLAGS=""
AC_PROG_CC
AM_PROG_LEX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

AC_SYS_LARGEFILE

dnl not building static libraries makes compilation fail on *bsd !
dnl AC_DISABLE_STATIC
dnl following also fails on *BSD
#if eval "test x$CYGWIN != xyes"; then
#  CXX=no
#  #F77=no
#  #GCJ=no
#fi

dnl AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_CHECK_TYPES(unsigned long long,,exit 1)
AC_CHECK_DECLS([sys_siglist])
AC_CHECK_HEADER(pthread.h,,exit 1)

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_FORK
dnl AC_PROG_GCC_TRADITIONAL
AC_FUNC_LSTAT
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
AC_FUNC_MALLOC
AC_FUNC_MKTIME
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRFTIME
AC_FUNC_UTIME_NULL
AC_FUNC_VPRINTF
dnl AC_FUNC_WAIT3
AC_CHECK_FUNCS([getcwd gethostbyaddr gethostbyname gettimeofday inet_ntoa memmove memset mkdir realloc regcomp rmdir select socket statfs strcasecmp strchr strdup strerror strncasecmp strpbrk strrchr strtol strtoul utime],,exit 1)
AC_CHECK_FUNCS([strlcat strptime strtok_r strtoull getopt_long inet_ntop inet_pton])

AC_CHECK_LIB(dl, dlopen,DL_FLAGS="-ldl",)
AC_CHECK_LIB(crypt, crypt,CRYPT_FLAGS="-lcrypt",)
ACX_PTHREAD(,exit 1)

AC_PATH_PROG(JW, jw, no)
AC_SUBST(JW)
AM_CONDITIONAL(HAVE_JW, test "x$JW" != "xno")

WZD_LIB_BERKELEY_DB(4, 1, 24, [db-4.2 db-4.1 db-4 db4 db])
WZD_LIB_OPENSSL(0,9,6,2)
WZD_LIB_PAM
WZD_LIB_MYSQL
WZD_LIB_PGSQL
WZD_LIB_TCL

# check for zlib (optional, used in module sfv)
AC_CHECK_LIB(z, inflateEnd, [zlib_cv_libz=yes], [zlib_cv_libz=no])
AC_CHECK_HEADER(zlib.h, [zlib_cv_zlib_h=yes], [zlib_cvs_zlib_h=no])
AC_MSG_CHECKING(zlib)
if test "$zlib_cv_libz" = "yes" -a "$zlib_cv_zlib_h" = "yes"
then
  #
  # If both library and header were found, use them
  #
  AC_MSG_RESULT(ok)
  AC_DEFINE(HAVE_ZLIB,1,"Define to 1 if you have the `zlib' library (-lz)")
else
  AC_MSG_RESULT(failed)
fi
AM_CONDITIONAL(USE_ZLIB, test "$zlib_cv_libz" = "yes" -a "$zlib_cv_zlib_h" = "yes")

# Build options string
WZD_BUILD_OPTS="threads"
COMMA=','

AC_MSG_CHECKING(whether to build in debug mode)

AC_ARG_ENABLE(debug, [  --enable-debug          enable debug mode],
    if eval "test x$enable_debug = xyes"; then
      AC_MSG_RESULT(yes)
      WZD_BUILD_OPTS="${WZD_BUILD_OPTS}${COMMA}debug"
      CPPFLAGS="$CPPFLAGS -g -O0 -DDEBUG"
    else
#      CPPFLAGS="$CPPFLAGS -O3 -pipe -fomit-frame-pointer -ffast-math"
      CPPFLAGS="$CPPFLAGS -O3 -pipe"
      AC_MSG_RESULT(no)
      WZD_BUILD_OPTS="${WZD_BUILD_OPTS}${COMMA}release"
    fi,
#    CPPFLAGS="$CPPFLAGS -O3 -pipe -fomit-frame-pointer -ffast-math"
    CPPFLAGS="$CPPFLAGS -O3 -pipe"
    AC_MSG_RESULT(no)
    WZD_BUILD_OPTS="${WZD_BUILD_OPTS}${COMMA}release"
)

if eval "test x$enable_debug = xyes"; then
  AM_WITH_MPATROL
fi

if eval "test x$wzd_lib_openssl = xyes"; then
  WZD_BUILD_OPTS="${WZD_BUILD_OPTS}${COMMA}ssl"
fi

AC_MSG_CHECKING(whether to build ipv6 support)

AC_ARG_ENABLE(ipv6, [  --enable-ipv6           enable ipv6 support (EXPERIMENTAL)],
    if eval "test x$enable_ipv6 = xyes"; then
      AC_MSG_RESULT(yes)
      CPPFLAGS="$CPPFLAGS -DIPV6_SUPPORT"
      WZD_BUILD_OPTS="${WZD_BUILD_OPTS}${COMMA}ipv6"
    else
      AC_MSG_RESULT(no)
    fi,
    AC_MSG_RESULT(no)
)

AC_MSG_CHECKING(whether to build utf8 support)

AC_ARG_ENABLE(utf8, [  --enable-utf8           enable utf8 support (EXPERIMENTAL)],
    if eval "test x$enable_utf8 = xyes"; then
      AC_MSG_RESULT(yes)
      WZD_BUILD_OPTS="${WZD_BUILD_OPTS}${COMMA}utf8"
    else
      AC_MSG_RESULT(no)
    fi,
    AC_MSG_RESULT(no)
)

if eval "test x$enable_utf8 = xyes"; then
  AM_ICONV
  WZD_LIB_UNICODE
  AC_DEFINE(HAVE_UTF8, 1, [Define if using utf8])
fi

AM_CONDITIONAL(USE_ICC, test x$CC = xicc)
if eval "test x$CC = xicc"; then
  WZD_BUILD_OPTS="${WZD_BUILD_OPTS}${COMMA}icc"
  echo "Changing dependancy mode to match intel compiler"
  CCDEPMODE="depmode=gcc"
#  CPPFLAGS="$CPPFLAGS -I/usr/include"
fi

AC_ARG_VAR(HARD_USERLIMIT,[max number of simultaneous logins allowed])
if eval "test x$HARD_USERLIMIT = x"; then
  AC_DEFINE_UNQUOTED(HARD_USERLIMIT,128)
  HARD_USERLIMIT=128
else
  AC_DEFINE_UNQUOTED(HARD_USERLIMIT,$HARD_USERLIMIT)
fi
AH_TEMPLATE([HARD_USERLIMIT],
            [Defines the maximum number of users
             simultaneously connected.])

AC_DEFINE_UNQUOTED(WZD_BUILD_OPTS,"$WZD_BUILD_OPTS")

AH_TEMPLATE([WZD_BUILD_OPTS],
            [Build options.])

AM_CONDITIONAL([HAVE_MYSQL], [test "$wzd_have_mysql" = "yes"])
AM_CONDITIONAL([HAVE_PAM], [test "$wzd_have_pam" = "yes"])
AM_CONDITIONAL([HAVE_TCL], [test "$wzd_have_tcl" = "yes"])

WZD_BUILD_NUM="`date +\"%Y%m%d\"`"
AC_DEFINE_UNQUOTED(WZD_BUILD_NUM,"$WZD_BUILD_NUM")
AH_TEMPLATE([WZD_BUILD_NUM],
            [Build number.])

#
#  ---------
# ( moo moo )
#  ---------
#         o   ^__^
#          o  (0_)\_______
#             (__)\       )\/\
#                 ||----w |
#                 ||     ||
#
if eval "test x$sysconfdir == x\${prefix}/etc"; then
  sysconfdir="${prefix}/etc/wzdftpd"
fi

e_prefix=`echo $prefix | sed -e 's|NONE|/usr/local|'`
e_sysconfdir=`echo $sysconfdir | sed -e "s|\\${prefix}|$e_prefix|"`
e_datadir=`echo $datadir | sed -e "s|\\${prefix}|$e_prefix|"`
e_localstatedir=`echo $localstatedir | sed -e "s|\\${prefix}|$e_prefix|"`

default_config=$e_sysconfdir/wzd.cfg
AC_DEFINE_UNQUOTED(WZD_DEFAULT_CONF,"$default_config")

AH_TEMPLATE([WZD_DEFAULT_CONF],
            [Default config file.])

AC_DEFINE_UNQUOTED(WZD_VERSION_STR,"$PACKAGE_NAME $ac_cv_build_alias mt $PACKAGE_VERSION")

AH_TEMPLATE([WZD_VERSION_STR],
            [Version string])

AC_SUBST(e_prefix)
AC_SUBST(e_datadir)
AC_SUBST(e_sysconfdir)
AC_SUBST(e_localstatedir)
AC_SUBST(CRYPT_FLAGS)
AC_SUBST(DL_FLAGS)
AC_SUBST(PTHREAD_FLAGS)
AC_SUBST(SSL_CPPFLAGS)
AC_SUBST(SSL_LDFLAGS)
AC_SUBST(VERSION)
AC_SUBST(WZD_BUILD_NUM)
AC_SUBST(WZD_BUILD_OPTS)
AC_SUBST(WZD_VERSION_STR)

AC_CONFIG_FILES([Makefile
                 ac-helpers/Makefile
                 backends/Makefile
                 backends/plaintext/Makefile
                 backends/mysql/Makefile
                 backends/pam/Makefile
		 doc/Makefile
		 init.d/Makefile
                 init.d/wzdftpd
                 modules/Makefile
                 modules/sfv/Makefile
                 modules/tcl/Makefile
                 modules/test/Makefile
                 src/Makefile
                 src/wzd.cfg
                 tools/Makefile
                 tools/siteconfig/Makefile
                 tools/siteuptime/Makefile
                 tools/sitewho/Makefile])
AC_OUTPUT

